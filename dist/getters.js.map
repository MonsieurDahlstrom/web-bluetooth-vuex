{"version":3,"sources":["../src/getters.js"],"names":["getters","webBluetoothDevices","state","devices","webBluetoothDevice","deviceAddress","find","device","id","webBluetoothServicesForDevice","services","filter","service","webBluetoothServiceForDevice","uuid","webBluetoothCharacteristicsForService","characteristics","characteristic","webBluetoothCharacteristicForService"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,UAAU;AACdC,uBAAqB,6BAACC,KAAD,EAAQF,OAAR,EAAqB;AACxC,WAAOE,MAAMC,OAAb;AACD,GAHa;AAIdC,sBAAoB,4BAACF,KAAD,EAAQF,OAAR;AAAA,WAAoB,UAACK,aAAD,EAAmB;AACzD,aAAOH,MAAMC,OAAN,CAAcG,IAAd,CAAmB;AAAA,eAAUC,OAAOC,EAAP,KAAcH,aAAxB;AAAA,OAAnB,CAAP;AACD,KAFmB;AAAA,GAJN;AAOdI,iCAA+B,uCAACP,KAAD,EAAQF,OAAR;AAAA,WAAoB,UAACO,MAAD,EAAY;AAC7D,aAAOL,MAAMQ,QAAN,CAAeC,MAAf,CAAsB,UAACC,OAAD,EAAa;AACxC,eAAOA,QAAQL,MAAR,KAAmBA,MAA1B;AACD,OAFM,CAAP;AAGD,KAJ8B;AAAA,GAPjB;AAYdM,gCAA8B,sCAACX,KAAD,EAAQF,OAAR;AAAA,WAAoB,UAACO,MAAD,EAASO,IAAT,EAAkB;AAClE,aAAOZ,MAAMQ,QAAN,CAAeJ,IAAf,CAAoB,UAACM,OAAD;AAAA,eAAaA,QAAQL,MAAR,KAAmBA,MAAnB,IAA6BK,QAAQE,IAAR,KAAiBA,IAA3D;AAAA,OAApB,CAAP;AACD,KAF6B;AAAA,GAZhB;AAedC,yCAAuC,+CAACb,KAAD,EAAQF,OAAR;AAAA,WAAoB,UAACY,OAAD,EAAa;AACtE,aAAOV,MAAMc,eAAN,CAAsBL,MAAtB,CAA6B,UAACM,cAAD;AAAA,eAAoBA,eAAeL,OAAf,KAA2BA,OAA/C;AAAA,OAA7B,CAAP;AACD,KAFsC;AAAA,GAfzB;AAkBdM,wCAAsC,8CAAChB,KAAD,EAAQF,OAAR;AAAA,WAAoB,UAACY,OAAD,EAAUE,IAAV,EAAmB;AAC3E,aAAOZ,MAAMc,eAAN,CAAsBV,IAAtB,CAA2B,UAACW,cAAD;AAAA,eAAoBA,eAAeL,OAAf,KAA2BA,OAA3B,IAAsCK,eAAeH,IAAf,KAAwBA,IAAlF;AAAA,OAA3B,CAAP;AACD,KAFqC;AAAA;AAlBxB,CAAhB;;kBAuBed,O","file":"getters.js","sourcesContent":["import WebBluetoothStoreUtils from './web-bluetooth-store-utils'\r\n\r\nconst getters = {\r\n  webBluetoothDevices: (state, getters) =>  {\r\n    return state.devices\r\n  },\r\n  webBluetoothDevice: (state, getters) => (deviceAddress) => {\r\n    return state.devices.find(device => device.id === deviceAddress)\r\n  },\r\n  webBluetoothServicesForDevice: (state, getters) => (device) => {\r\n    return state.services.filter((service) => {\r\n      return service.device === device\r\n    })\r\n  },\r\n  webBluetoothServiceForDevice: (state, getters) => (device, uuid) => {\r\n    return state.services.find((service) => service.device === device && service.uuid === uuid)\r\n  },\r\n  webBluetoothCharacteristicsForService: (state, getters) => (service) => {\r\n    return state.characteristics.filter((characteristic) => characteristic.service === service)\r\n  },\r\n  webBluetoothCharacteristicForService: (state, getters) => (service, uuid) => {\r\n    return state.characteristics.find((characteristic) => characteristic.service === service && characteristic.uuid === uuid)\r\n  }\r\n}\r\n\r\nexport default getters\r\n"]}