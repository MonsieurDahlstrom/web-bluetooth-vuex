{"version":3,"sources":["../src/getters.js"],"names":["getters","webBluetoothDevices","state","devices","webBluetoothServicesForDevice","device","services","filter","service","webBluetoothServiceForDevice","uuid","find","webBluetoothCharacteristicsForService","characteristics","characteristic","webBluetoothCharacteristicForService"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,UAAU;AACdC,uBAAqB,6BAACC,KAAD,EAAQF,OAAR,EAAqB;AACxC,WAAOE,MAAMC,OAAb;AACD,GAHa;AAIdC,iCAA+B,uCAACF,KAAD,EAAQF,OAAR;AAAA,WAAoB,UAACK,MAAD,EAAY;AAC7D,aAAOH,MAAMI,QAAN,CAAeC,MAAf,CAAsB,UAACC,OAAD,EAAa;AACxC,eAAOA,QAAQH,MAAR,KAAmBA,MAA1B;AACD,OAFM,CAAP;AAGD,KAJ8B;AAAA,GAJjB;AASdI,gCAA8B,sCAACP,KAAD,EAAQF,OAAR;AAAA,WAAoB,UAACK,MAAD,EAASK,IAAT,EAAkB;AAClE,aAAOR,MAAMI,QAAN,CAAeK,IAAf,CAAoB,UAACH,OAAD;AAAA,eAAaA,QAAQH,MAAR,KAAmBA,MAAnB,IAA6BG,QAAQE,IAAR,KAAiBA,IAA3D;AAAA,OAApB,CAAP;AACD,KAF6B;AAAA,GAThB;AAYdE,yCAAuC,+CAACV,KAAD,EAAQF,OAAR;AAAA,WAAoB,UAACQ,OAAD,EAAa;AACtE,aAAON,MAAMW,eAAN,CAAsBN,MAAtB,CAA6B,UAACO,cAAD;AAAA,eAAoBA,eAAeN,OAAf,KAA2BA,OAA/C;AAAA,OAA7B,CAAP;AACD,KAFsC;AAAA,GAZzB;AAedO,wCAAsC,8CAACb,KAAD,EAAQF,OAAR;AAAA,WAAoB,UAACQ,OAAD,EAAUE,IAAV,EAAmB;AAC3E,aAAOR,MAAMW,eAAN,CAAsBF,IAAtB,CAA2B,UAACG,cAAD;AAAA,eAAoBA,eAAeN,OAAf,KAA2BA,OAA3B,IAAsCM,eAAeJ,IAAf,KAAwBA,IAAlF;AAAA,OAA3B,CAAP;AACD,KAFqC;AAAA;AAfxB,CAAhB;;kBAoBeV,O","file":"getters.js","sourcesContent":["import WebBluetoothStoreUtils from './web-bluetooth-store-utils'\n\nconst getters = {\n  webBluetoothDevices: (state, getters) =>  {\n    return state.devices\n  },\n  webBluetoothServicesForDevice: (state, getters) => (device) => {\n    return state.services.filter((service) => {\n      return service.device === device\n    })\n  },\n  webBluetoothServiceForDevice: (state, getters) => (device, uuid) => {\n    return state.services.find((service) => service.device === device && service.uuid === uuid)\n  },\n  webBluetoothCharacteristicsForService: (state, getters) => (service) => {\n    return state.characteristics.filter((characteristic) => characteristic.service === service)\n  },\n  webBluetoothCharacteristicForService: (state, getters) => (service, uuid) => {\n    return state.characteristics.find((characteristic) => characteristic.service === service && characteristic.uuid === uuid)\n  }\n}\n\nexport default getters\n"]}