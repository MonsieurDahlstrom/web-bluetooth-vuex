{"version":3,"sources":["../../src/actions/device.js"],"names":["mutationTypes","DeviceActions","webBluetoothAddDevice","query","dispatch","commit","requestParameters","name","namePrefix","filters","push","optionalServices","services","undefined","navigator","bluetooth","requestDevice","device","BLE_DEVICE_ADDED","webBluetoothWatchAdvertisments","gatt","connected","GattAdvertismentCallback","event","advertisment","addEventListener","watchAdvertisements","BLE_DEVICE_UPDATED","webBluetoothRemoveDevice","removeEventListener","GattDisconnectionCallback","disconnect","BLE_DEVICE_REMOVED","webBluetoothConnectDevice","payload","connect","currentTarget","webBluetoothDisconnectDevice"],"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","file":"device.js","sourcesContent":["import * as mutationTypes from '../mutation-types'\n\nconst DeviceActions = {\n\n  /*\n    action launches the bluetooth native dialog to find devices in the proxmity\n    the query can contain the following keys:\n      * name\n      * namePrefix\n      * services - Setting services without a name or namePrefix will not return any results\n      * optionalServices\n  */\n  async webBluetoothAddDevice ({ dispatch, commit }, query) {\n    var requestParameters = { }\n    // Was a device name set for the character\n    if(query.name || query.namePrefix) {\n      var filters = []\n      if (query.name) {\n        filters.push({name: query.name})\n      }\n      if (query.namePrefix) {\n        filters.push({namePrefix: query.namePrefix})\n      }\n      requestParameters.filters = filters\n      requestParameters.optionalServices = query.services\n    } else{\n      requestParameters['acceptAllDevices'] = true\n      requestParameters.optionalServices = query.services\n    }\n    // Does the query specify a collection of optional services to look for\n    if (query.optionalServices !== undefined) {\n      requestParameters['optionalServices'] = query.optionalServices\n    }\n    // Perform Query\n    let device = await navigator.bluetooth.requestDevice(requestParameters)\n    if (device) {\n      commit(mutationTypes.BLE_DEVICE_ADDED, {device: device})\n    }\n  },\n\n  async webBluetoothWatchAdvertisments ({ dispatch, commit }, query) {\n    if (query.device.gatt.connected) {\n      //Add listener for RSSI\n      query.device.GattAdvertismentCallback = (event) => {\n        dispatch('webBluetoothDeviceAdvertisment', {advertisment: event})\n      }\n      query.device.addEventListener('advertisementreceived', query.device.GattAdvertismentCallback)\n      await query.device.watchAdvertisements()\n      commit(mutationTypes.BLE_DEVICE_UPDATED, {device: query.device})\n    }\n  },\n\n  async webBluetoothRemoveDevice ({dispatch, commit}, query) {\n    if (query.device.gatt.connected) {\n      query.device.removeEventListener('gattserverdisconnected', query.device.GattDisconnectionCallback)\n      query.device.removeEventListener('advertisementreceived', query.device.GattAdvertismentCallback)\n      await query.device.gatt.disconnect()\n    }\n    commit(mutationTypes.BLE_DEVICE_REMOVED, {device: query.device})\n  },\n\n  async webBluetoothConnectDevice ({ dispatch, commit }, payload) {\n    if (!payload.device.gatt.connected) {\n      await payload.device.gatt.connect()\n      payload.device.GattDisconnectionCallback = (event) => {\n        payload.device.removeEventListener('gattserverdisconnected', payload.device.GattDisconnectionCallback)\n        payload.device.removeEventListener('advertisementreceived', payload.device.GattAdvertismentCallback)\n        dispatch('webBluetoothRemoveDevice', {device: event.currentTarget})\n      }\n      payload.device.addEventListener('gattserverdisconnected', payload.device.GattDisconnectionCallback)\n      commit(mutationTypes.BLE_DEVICE_UPDATED, {device: payload.device})\n    }\n  },\n\n  async webBluetoothDisconnectDevice ({ dispatch, commit }, payload) {\n    if (payload.device.gatt.connected) {\n      payload.device.removeEventListener('gattserverdisconnected', payload.device.GattDisconnectionCallback)\n      payload.device.removeEventListener('advertisementreceived', payload.device.GattAdvertismentCallback)\n      await payload.device.gatt.disconnect()\n      commit(mutationTypes.BLE_DEVICE_UPDATED, {device: payload.device})\n    }\n  }\n}\n\nexport default DeviceActions\n\n/*\nfunction anyNamedDevice () {\n  // This is the closest we can get for now to get all devices.\n  // https://github.com/WebBluetoothCG/web-bluetooth/issues/234\n  return Array.from('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    .map(c => ({namePrefix: c}))\n    .concat({name: ''})\n}\n*/\n\n/*\ndiscoverServicesForDevice ({ dispatch, commit }, bluetoothGatt) {\n  return bluetoothGatt.getPrimaryServices()\n  .then(services => {\n    return Promise.mapSeries(services, function (service, index, length) {\n      return dispatch('discoverCharacteristicsForService', service)\n      .then(_ => {\n        commit(mutationTypes.BLE_SERVICE_ADDED, {service: service})\n      })\n    })\n  })\n  .catch(err => console.error(err))\n},\ndiscoverCharacteristicsForService ({ dispatch, commit }, bluetoothService) {\n  return bluetoothService.getCharacteristics()\n  .then(characteristics => {\n    return Promise.mapSeries(characteristics, function (characteristic, index, length) {\n      return dispatch('configureCharacteristic', characteristic)\n      .then(_ => {\n        commit(mutationTypes.BLE_CHARACTERISTIC_ADDED, {characteristic: characteristic})\n      })\n    })\n    .then(_ => { console.log('characteristics configured') })\n  })\n  .catch(err => console.error(err))\n},\nconfigureCharacteristic ({ dispatch, commit }, bluetoothCharacteristic) {\n  return DiscoveryPromises.promiseForConfigurationOfCharacteristic(bluetoothCharacteristic)\n  .catch(err => console.error(err))\n},\n*/\n/*\nfunction filterByUUID (objectsWithUUID) {\n  var foundServices = []\n  return objectsWithUUID.filter(item => {\n    if (foundServices.includes(item.uuid)) {\n      return false\n    } else {\n      foundServices.push(item.uuid)\n      return true\n    }\n  })\n}\n\n// const BatteryCharacteristicUUID = '00002a1b-0000-1000-8000-00805f9b34fb'\n// const BatteryServiceUUID = '0000180f-0000-1000-8000-00805f9b34fb'\nconst ColourPickerServiceUUID = '47CA46C0-848E-11E6-BDF4-0800200C9A66'.toLowerCase()\nconst ColourPickerCharacteristicUUID = 'AA9AB6CA-AF3F-45B2-8932-A5043412A2FA'.toLowerCase()\n\nclass CharacteristicListener {\n  constructor () {\n    this.characteristics = []\n  }\n\n  addCharacteristic (characteristic) {\n    if (!this.characteristics.includes(characteristic)) {\n      this.characteristics.push(characteristic)\n      console.log(characteristic.addEventListener('characteristicvaluechanged', this.onCharacteristicEvent))\n    }\n    console.log(this.characteristics)\n  }\n\n  onCharacteristicEvent (ev) {\n    const dataView = ev.target.value\n    let data = []\n    for (let i = 0; i < dataView.byteLength; i++) {\n      data.push(dataView.getUint8(i))\n    }\n    console.log('CharacteristicListener onCharacteristicEvent')\n    console.log('CharacteristicListener Characteristic: ' + ev.target.uuid + ' ' + data)\n    console.log('CharacteristicListener characteristicvaluechanged: ' + ev.target.characteristicValueChanged)\n  }\n\n}\n\nconst characteristicListener = new CharacteristicListener()\n\n*/\n"]}