{"version":3,"sources":["../../src/actions/device.js"],"names":["mutationTypes","DeviceActions","webBluetoothDiscoverDevice","query","dispatch","commit","requestParameters","name","undefined","services","map","service","uuid","navigator","bluetooth","requestDevice","device","GattAdvertismentCallback","event","advertisment","addEventListener","BLE_DEVICE_ADDED","webBluetoothConnectDevice","payload","gatt","connect","GattDisconnectionCallback","currentTarget","BLE_DEVICE_UPDATED","webBluetoothDisconnectDevice","connected","removeEventListener","disconnect"],"mappings":";;;;;;;;;;;;;;AAAA;;IAAYA,a;;;;;;AAEZ,IAAMC,gBAAgB;AAUdC,4BAVc;AAAA,kGAUoCC,KAVpC;AAAA,UAUgBC,QAVhB,QAUgBA,QAVhB;AAAA,UAU0BC,MAV1B,QAU0BA,MAV1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAWdC,+BAXc,GAWM,EAXN;;AAalB,kBAAIH,MAAMI,IAAN,KAAeC,SAAnB,EAA8B;AAC5BF,kCAAkB,SAAlB,IAA+B,CAAC,EAACC,MAAMJ,MAAMI,IAAb,EAAD,CAA/B;AACD,eAFD,MAEO;AACLD,kCAAkB,kBAAlB,IAAwC,IAAxC;AACD;;AAED,kBAAIH,MAAMM,QAAN,KAAmBD,SAAvB,EAAkC;AAChCF,kCAAkB,kBAAlB,IAAwCH,MAAMM,QAAN,CAAeC,GAAf,CAAmB;AAAA,yBAAWC,QAAQC,IAAnB;AAAA,iBAAnB,CAAxC;AACD;AArBiB;AAAA,qBAuBCC,UAAUC,SAAV,CAAoBC,aAApB,CAAkCT,iBAAlC,CAvBD;;AAAA;AAuBdU,oBAvBc;;AAyBlBA,qBAAOC,wBAAP,GAAkC,UAAUC,KAAV,EAAiB;AACjDd,yBAAS,gCAAT,EAA2C,EAACe,cAAcD,KAAf,EAA3C;AACD,eAFD;AAGAF,qBAAOI,gBAAP,CAAwB,uBAAxB,EAAiDJ,OAAOC,wBAAxD;AACAZ,qBAAOL,cAAcqB,gBAArB,EAAuC,EAACL,QAAQA,MAAT,EAAvC;;AA7BkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAgCdM,2BAhCc;AAAA,oGAgCmCC,OAhCnC;AAAA,UAgCenB,QAhCf,SAgCeA,QAhCf;AAAA,UAgCyBC,MAhCzB,SAgCyBA,MAhCzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAiCZkB,QAAQP,MAAR,CAAeQ,IAAf,CAAoBC,OAApB,EAjCY;;AAAA;AAkClBF,sBAAQP,MAAR,CAAeU,yBAAf,GAA2C,UAASR,KAAT,EAAgB;AACzDd,yBAAS,8BAAT,EAAyC,EAACY,QAAQE,MAAMS,aAAf,EAAzC;AACD,eAFD;AAGAJ,sBAAQP,MAAR,CAAeI,gBAAf,CAAgC,wBAAhC,EAA0DG,QAAQP,MAAR,CAAeU,yBAAzE;AACArB,qBAAOL,cAAc4B,kBAArB,EAAyC,EAACZ,QAAQO,QAAQP,MAAjB,EAAzC;;AAtCkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAyCda,8BAzCc;AAAA,oGAyCsCN,OAzCtC;AAAA,UAyCkBnB,QAzClB,SAyCkBA,QAzClB;AAAA,UAyC4BC,MAzC5B,SAyC4BA,MAzC5B;AAAA;AAAA;AAAA;AAAA;AAAA,mBA0CdkB,QAAQP,MAAR,CAAeQ,IAAf,CAAoBM,SA1CN;AAAA;AAAA;AAAA;;AA2ChBP,sBAAQP,MAAR,CAAee,mBAAf,CAAmC,wBAAnC,EAA6DR,QAAQP,MAAR,CAAeU,yBAA5E;AACAH,sBAAQP,MAAR,CAAee,mBAAf,CAAmC,uBAAnC,EAA4DR,QAAQP,MAAR,CAAeC,wBAA3E;AA5CgB;AAAA,qBA6CVM,QAAQP,MAAR,CAAeQ,IAAf,CAAoBQ,UAApB,EA7CU;;AAAA;AA+ClB3B,qBAAOL,cAAc4B,kBAArB,EAAyC,EAACZ,QAAQO,QAAQP,MAAjB,EAAzC;;AA/CkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAtB;;kBAmDef,a","file":"device.js","sourcesContent":["import * as mutationTypes from '../mutation-types'\r\n\r\nconst DeviceActions = {\r\n\r\n  /*\r\n  TODO: Change the implemntation to cover all the filter options:\r\n  {services: ['heart_rate']},\r\n  {services: [0x1802, 0x1803]},\r\n  {services: ['c48e6067-5295-48d3-8d5c-0395f61792b1']},\r\n  {name: 'ExampleName'},\r\n  {namePrefix: 'Prefix'}\r\n  */\r\n  async webBluetoothDiscoverDevice ({ dispatch, commit }, query) {\r\n    var requestParameters = { }\r\n    // Was a device name set for the character\r\n    if (query.name !== undefined) {\r\n      requestParameters['filters'] = [{name: query.name}]\r\n    } else {\r\n      requestParameters['acceptAllDevices'] = true\r\n    }\r\n    // Does the query specify a collection of services to look for\r\n    if (query.services !== undefined) {\r\n      requestParameters['optionalServices'] = query.services.map(service => service.uuid)\r\n    }\r\n    // Perform Query\r\n    let device = await navigator.bluetooth.requestDevice(requestParameters)\r\n    //Add listener for RSSI\r\n    device.GattAdvertismentCallback = function (event) {\r\n      dispatch('webBluetoothDeviceAdvertisment', {advertisment: event})\r\n    }\r\n    device.addEventListener('advertisementreceived', device.GattAdvertismentCallback)\r\n    commit(mutationTypes.BLE_DEVICE_ADDED, {device: device})\r\n  },\r\n\r\n  async webBluetoothConnectDevice ({ dispatch, commit }, payload) {\r\n    await payload.device.gatt.connect()\r\n    payload.device.GattDisconnectionCallback = function(event) {\r\n      dispatch('webBluetoothDisconnectDevice', {device: event.currentTarget})\r\n    }\r\n    payload.device.addEventListener('gattserverdisconnected', payload.device.GattDisconnectionCallback)\r\n    commit(mutationTypes.BLE_DEVICE_UPDATED, {device: payload.device})\r\n  },\r\n\r\n  async webBluetoothDisconnectDevice ({ dispatch, commit }, payload) {\r\n    if (payload.device.gatt.connected) {\r\n      payload.device.removeEventListener('gattserverdisconnected', payload.device.GattDisconnectionCallback)\r\n      payload.device.removeEventListener('advertisementreceived', payload.device.GattAdvertismentCallback)\r\n      await payload.device.gatt.disconnect()\r\n    }\r\n    commit(mutationTypes.BLE_DEVICE_UPDATED, {device: payload.device})\r\n  }\r\n}\r\n\r\nexport default DeviceActions\r\n\r\n/*\r\nfunction anyNamedDevice () {\r\n  // This is the closest we can get for now to get all devices.\r\n  // https://github.com/WebBluetoothCG/web-bluetooth/issues/234\r\n  return Array.from('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\r\n    .map(c => ({namePrefix: c}))\r\n    .concat({name: ''})\r\n}\r\n*/\r\n\r\n/*\r\ndiscoverServicesForDevice ({ dispatch, commit }, bluetoothGatt) {\r\n  return bluetoothGatt.getPrimaryServices()\r\n  .then(services => {\r\n    return Promise.mapSeries(services, function (service, index, length) {\r\n      return dispatch('discoverCharacteristicsForService', service)\r\n      .then(_ => {\r\n        commit(mutationTypes.BLE_SERVICE_ADDED, {service: service})\r\n      })\r\n    })\r\n  })\r\n  .catch(err => console.error(err))\r\n},\r\ndiscoverCharacteristicsForService ({ dispatch, commit }, bluetoothService) {\r\n  return bluetoothService.getCharacteristics()\r\n  .then(characteristics => {\r\n    return Promise.mapSeries(characteristics, function (characteristic, index, length) {\r\n      return dispatch('configureCharacteristic', characteristic)\r\n      .then(_ => {\r\n        commit(mutationTypes.BLE_CHARACTERISTIC_ADDED, {characteristic: characteristic})\r\n      })\r\n    })\r\n    .then(_ => { console.log('characteristics configured') })\r\n  })\r\n  .catch(err => console.error(err))\r\n},\r\nconfigureCharacteristic ({ dispatch, commit }, bluetoothCharacteristic) {\r\n  return DiscoveryPromises.promiseForConfigurationOfCharacteristic(bluetoothCharacteristic)\r\n  .catch(err => console.error(err))\r\n},\r\n*/\r\n/*\r\nfunction filterByUUID (objectsWithUUID) {\r\n  var foundServices = []\r\n  return objectsWithUUID.filter(item => {\r\n    if (foundServices.includes(item.uuid)) {\r\n      return false\r\n    } else {\r\n      foundServices.push(item.uuid)\r\n      return true\r\n    }\r\n  })\r\n}\r\n\r\n// const BatteryCharacteristicUUID = '00002a1b-0000-1000-8000-00805f9b34fb'\r\n// const BatteryServiceUUID = '0000180f-0000-1000-8000-00805f9b34fb'\r\nconst ColourPickerServiceUUID = '47CA46C0-848E-11E6-BDF4-0800200C9A66'.toLowerCase()\r\nconst ColourPickerCharacteristicUUID = 'AA9AB6CA-AF3F-45B2-8932-A5043412A2FA'.toLowerCase()\r\n\r\nclass CharacteristicListener {\r\n  constructor () {\r\n    this.characteristics = []\r\n  }\r\n\r\n  addCharacteristic (characteristic) {\r\n    if (!this.characteristics.includes(characteristic)) {\r\n      this.characteristics.push(characteristic)\r\n      console.log(characteristic.addEventListener('characteristicvaluechanged', this.onCharacteristicEvent))\r\n    }\r\n    console.log(this.characteristics)\r\n  }\r\n\r\n  onCharacteristicEvent (ev) {\r\n    const dataView = ev.target.value\r\n    let data = []\r\n    for (let i = 0; i < dataView.byteLength; i++) {\r\n      data.push(dataView.getUint8(i))\r\n    }\r\n    console.log('CharacteristicListener onCharacteristicEvent')\r\n    console.log('CharacteristicListener Characteristic: ' + ev.target.uuid + ' ' + data)\r\n    console.log('CharacteristicListener characteristicvaluechanged: ' + ev.target.characteristicValueChanged)\r\n  }\r\n\r\n}\r\n\r\nconst characteristicListener = new CharacteristicListener()\r\n\r\n*/\r\n"]}