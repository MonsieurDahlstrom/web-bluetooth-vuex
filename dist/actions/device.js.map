{"version":3,"sources":["../../src/actions/device.js"],"names":["mutationTypes","DeviceActions","webBluetoothDiscoverDevice","query","dispatch","commit","requestParameters","name","undefined","services","map","service","uuid","navigator","bluetooth","requestDevice","device","GattAdvertismentCallback","event","advertisment","addEventListener","BLE_DEVICE_ADDED","webBluetoothConnectDevice","payload","gatt","connect","GattDisconnectionCallback","currentTarget","BLE_DEVICE_UPDATED","webBluetoothDisconnectDevice","connected","removeEventListener","disconnect"],"mappings":";;;;;;;;;;;;;;AAAA;;IAAYA,a;;;;;;AAEZ,IAAMC,gBAAgB;AAEdC,4BAFc;AAAA,kGAEoCC,KAFpC;AAAA,UAEgBC,QAFhB,QAEgBA,QAFhB;AAAA,UAE0BC,MAF1B,QAE0BA,MAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAGdC,+BAHc,GAGM,EAHN;;AAKlB,kBAAIH,MAAMI,IAAN,KAAeC,SAAnB,EAA8B;AAC5BF,kCAAkB,SAAlB,IAA+BH,MAAMI,IAArC;AACD,eAFD,MAEO;AACLD,kCAAkB,kBAAlB,IAAwC,IAAxC;AACD;;AAED,kBAAIH,MAAMM,QAAN,KAAmBD,SAAvB,EAAkC;AAChCF,kCAAkB,kBAAlB,IAAwCH,MAAMM,QAAN,CAAeC,GAAf,CAAmB;AAAA,yBAAWC,QAAQC,IAAnB;AAAA,iBAAnB,CAAxC;AACD;AAbiB;AAAA,qBAeCC,UAAUC,SAAV,CAAoBC,aAApB,CAAkCT,iBAAlC,CAfD;;AAAA;AAedU,oBAfc;;AAiBlBA,qBAAOC,wBAAP,GAAkC,UAAUC,KAAV,EAAiB;AACjDd,yBAAS,gCAAT,EAA2C,EAACe,cAAcD,KAAf,EAA3C;AACD,eAFD;AAGAF,qBAAOI,gBAAP,CAAwB,uBAAxB,EAAiDJ,OAAOC,wBAAxD;AACAZ,qBAAOL,cAAcqB,gBAArB,EAAuC,EAACL,QAAQA,MAAT,EAAvC;;AArBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAwBdM,2BAxBc;AAAA,oGAwBmCC,OAxBnC;AAAA,UAwBenB,QAxBf,SAwBeA,QAxBf;AAAA,UAwByBC,MAxBzB,SAwByBA,MAxBzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAyBZkB,QAAQP,MAAR,CAAeQ,IAAf,CAAoBC,OAApB,EAzBY;;AAAA;AA0BlBF,sBAAQP,MAAR,CAAeU,yBAAf,GAA2C,UAASR,KAAT,EAAgB;AACzDd,yBAAS,8BAAT,EAAyC,EAACY,QAAQE,MAAMS,aAAf,EAAzC;AACD,eAFD;AAGAJ,sBAAQP,MAAR,CAAeI,gBAAf,CAAgC,wBAAhC,EAA0DG,QAAQP,MAAR,CAAeU,yBAAzE;AACArB,qBAAOL,cAAc4B,kBAArB,EAAyC,EAACZ,QAAQO,QAAQP,MAAjB,EAAzC;;AA9BkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAiCda,8BAjCc;AAAA,oGAiCsCN,OAjCtC;AAAA,UAiCkBnB,QAjClB,SAiCkBA,QAjClB;AAAA,UAiC4BC,MAjC5B,SAiC4BA,MAjC5B;AAAA;AAAA;AAAA;AAAA;AAAA,mBAkCdkB,QAAQP,MAAR,CAAeQ,IAAf,CAAoBM,SAlCN;AAAA;AAAA;AAAA;;AAmChBP,sBAAQP,MAAR,CAAee,mBAAf,CAAmC,wBAAnC,EAA6DR,QAAQP,MAAR,CAAeU,yBAA5E;AACAH,sBAAQP,MAAR,CAAee,mBAAf,CAAmC,uBAAnC,EAA4DR,QAAQP,MAAR,CAAeC,wBAA3E;AApCgB;AAAA,qBAqCVM,QAAQP,MAAR,CAAeQ,IAAf,CAAoBQ,UAApB,EArCU;;AAAA;AAuClB3B,qBAAOL,cAAc4B,kBAArB,EAAyC,EAACZ,QAAQO,QAAQP,MAAjB,EAAzC;;AAvCkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAtB;;kBA2Cef,a","file":"device.js","sourcesContent":["import * as mutationTypes from '../mutation-types'\n\nconst DeviceActions = {\n\n  async webBluetoothDiscoverDevice ({ dispatch, commit }, query) {\n    var requestParameters = { }\n    // Was a device name set for the character\n    if (query.name !== undefined) {\n      requestParameters['filters'] = query.name\n    } else {\n      requestParameters['acceptAllDevices'] = true\n    }\n    // Does the query specify a collection of services to look for\n    if (query.services !== undefined) {\n      requestParameters['optionalServices'] = query.services.map(service => service.uuid)\n    }\n    // Perform Query\n    let device = await navigator.bluetooth.requestDevice(requestParameters)\n    //Add listener for RSSI\n    device.GattAdvertismentCallback = function (event) {\n      dispatch('webBluetoothDeviceAdvertisment', {advertisment: event})\n    }\n    device.addEventListener('advertisementreceived', device.GattAdvertismentCallback)\n    commit(mutationTypes.BLE_DEVICE_ADDED, {device: device})\n  },\n\n  async webBluetoothConnectDevice ({ dispatch, commit }, payload) {\n    await payload.device.gatt.connect()\n    payload.device.GattDisconnectionCallback = function(event) {\n      dispatch('webBluetoothDisconnectDevice', {device: event.currentTarget})\n    }\n    payload.device.addEventListener('gattserverdisconnected', payload.device.GattDisconnectionCallback)\n    commit(mutationTypes.BLE_DEVICE_UPDATED, {device: payload.device})\n  },\n\n  async webBluetoothDisconnectDevice ({ dispatch, commit }, payload) {\n    if (payload.device.gatt.connected) {\n      payload.device.removeEventListener('gattserverdisconnected', payload.device.GattDisconnectionCallback)\n      payload.device.removeEventListener('advertisementreceived', payload.device.GattAdvertismentCallback)\n      await payload.device.gatt.disconnect()\n    }\n    commit(mutationTypes.BLE_DEVICE_UPDATED, {device: payload.device})\n  }\n}\n\nexport default DeviceActions\n\n/*\nfunction anyNamedDevice () {\n  // This is the closest we can get for now to get all devices.\n  // https://github.com/WebBluetoothCG/web-bluetooth/issues/234\n  return Array.from('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    .map(c => ({namePrefix: c}))\n    .concat({name: ''})\n}\n*/\n\n/*\ndiscoverServicesForDevice ({ dispatch, commit }, bluetoothGatt) {\n  return bluetoothGatt.getPrimaryServices()\n  .then(services => {\n    return Promise.mapSeries(services, function (service, index, length) {\n      return dispatch('discoverCharacteristicsForService', service)\n      .then(_ => {\n        commit(mutationTypes.BLE_SERVICE_ADDED, {service: service})\n      })\n    })\n  })\n  .catch(err => console.error(err))\n},\ndiscoverCharacteristicsForService ({ dispatch, commit }, bluetoothService) {\n  return bluetoothService.getCharacteristics()\n  .then(characteristics => {\n    return Promise.mapSeries(characteristics, function (characteristic, index, length) {\n      return dispatch('configureCharacteristic', characteristic)\n      .then(_ => {\n        commit(mutationTypes.BLE_CHARACTERISTIC_ADDED, {characteristic: characteristic})\n      })\n    })\n    .then(_ => { console.log('characteristics configured') })\n  })\n  .catch(err => console.error(err))\n},\nconfigureCharacteristic ({ dispatch, commit }, bluetoothCharacteristic) {\n  return DiscoveryPromises.promiseForConfigurationOfCharacteristic(bluetoothCharacteristic)\n  .catch(err => console.error(err))\n},\n*/\n/*\nfunction filterByUUID (objectsWithUUID) {\n  var foundServices = []\n  return objectsWithUUID.filter(item => {\n    if (foundServices.includes(item.uuid)) {\n      return false\n    } else {\n      foundServices.push(item.uuid)\n      return true\n    }\n  })\n}\n\n// const BatteryCharacteristicUUID = '00002a1b-0000-1000-8000-00805f9b34fb'\n// const BatteryServiceUUID = '0000180f-0000-1000-8000-00805f9b34fb'\nconst ColourPickerServiceUUID = '47CA46C0-848E-11E6-BDF4-0800200C9A66'.toLowerCase()\nconst ColourPickerCharacteristicUUID = 'AA9AB6CA-AF3F-45B2-8932-A5043412A2FA'.toLowerCase()\n\nclass CharacteristicListener {\n  constructor () {\n    this.characteristics = []\n  }\n\n  addCharacteristic (characteristic) {\n    if (!this.characteristics.includes(characteristic)) {\n      this.characteristics.push(characteristic)\n      console.log(characteristic.addEventListener('characteristicvaluechanged', this.onCharacteristicEvent))\n    }\n    console.log(this.characteristics)\n  }\n\n  onCharacteristicEvent (ev) {\n    const dataView = ev.target.value\n    let data = []\n    for (let i = 0; i < dataView.byteLength; i++) {\n      data.push(dataView.getUint8(i))\n    }\n    console.log('CharacteristicListener onCharacteristicEvent')\n    console.log('CharacteristicListener Characteristic: ' + ev.target.uuid + ' ' + data)\n    console.log('CharacteristicListener characteristicvaluechanged: ' + ev.target.characteristicValueChanged)\n  }\n\n}\n\nconst characteristicListener = new CharacteristicListener()\n\n*/\n"]}