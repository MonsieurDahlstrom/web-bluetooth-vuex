{"version":3,"sources":["../../src/actions/device.js"],"names":["mutationTypes","DeviceActions","webBluetoothAddDevice","query","dispatch","commit","requestParameters","name","namePrefix","filters","push","optionalServices","services","undefined","map","service","uuid","navigator","bluetooth","requestDevice","device","GattAdvertismentCallback","event","advertisment","addEventListener","BLE_DEVICE_ADDED","webBluetoothRemoveDevice","gatt","connected","payload","removeEventListener","GattDisconnectionCallback","disconnect","BLE_DEVICE_REMOVED","webBluetoothConnectDevice","connect","currentTarget","BLE_DEVICE_UPDATED","webBluetoothDisconnectDevice"],"mappings":"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","file":"device.js","sourcesContent":["import * as mutationTypes from '../mutation-types'\n\nconst DeviceActions = {\n\n  /*\n    action launches the bluetooth native dialog to find devices in the proxmity\n    the query can contain the following keys:\n      * name\n      * namePrefix\n      * services - Setting services without a name or namePrefix will not return any results\n      * optionalServices\n  */\n  async webBluetoothAddDevice ({ dispatch, commit }, query) {\n    var requestParameters = { }\n    // Was a device name set for the character\n    if(query.name || query.namePrefix) {\n      var filters = []\n      if (query.name) {\n        filters.push({name: query.name})\n      }\n      if (query.namePrefix) {\n        filters.push({namePrefix: query.namePrefix})\n      }\n      requestParameters.filters = filters\n      requestParameters.optionalServices = query.services\n    } else{\n      requestParameters['acceptAllDevices'] = true\n      requestParameters.optionalServices = query.services\n    }\n    // Does the query specify a collection of optional services to look for\n    if (query.optionalServices !== undefined) {\n      requestParameters['optionalServices'] = query.optionalServices.map(service => service.uuid)\n    }\n    // Perform Query\n    let device = await navigator.bluetooth.requestDevice(requestParameters)\n    if (device) {\n      //Add listener for RSSI\n      device.GattAdvertismentCallback = function (event) {\n        dispatch('webBluetoothDeviceAdvertisment', {advertisment: event})\n      }\n      device.addEventListener('advertisementreceived', device.GattAdvertismentCallback)\n      commit(mutationTypes.BLE_DEVICE_ADDED, {device: device})\n    }\n  },\n\n  async webBluetoothRemoveDevice ({ dispatch, commit }, query) {\n    if (query.device.gatt.connected) {\n      payload.device.removeEventListener('gattserverdisconnected', payload.device.GattDisconnectionCallback)\n      payload.device.removeEventListener('advertisementreceived', payload.device.GattAdvertismentCallback)\n      await payload.device.gatt.disconnect()\n    }\n    commit(mutationTypes.BLE_DEVICE_REMOVED, {device: query.device})\n  },\n\n  async webBluetoothConnectDevice ({ dispatch, commit }, payload) {\n    await payload.device.gatt.connect()\n    payload.device.GattDisconnectionCallback = function(event) {\n      dispatch('webBluetoothDisconnectDevice', {device: event.currentTarget})\n    }\n    payload.device.addEventListener('gattserverdisconnected', payload.device.GattDisconnectionCallback)\n    commit(mutationTypes.BLE_DEVICE_UPDATED, {device: payload.device})\n  },\n\n  async webBluetoothDisconnectDevice ({ dispatch, commit }, payload) {\n    if (payload.device.gatt.connected) {\n      payload.device.removeEventListener('gattserverdisconnected', payload.device.GattDisconnectionCallback)\n      payload.device.removeEventListener('advertisementreceived', payload.device.GattAdvertismentCallback)\n      await payload.device.gatt.disconnect()\n    }\n    commit(mutationTypes.BLE_DEVICE_UPDATED, {device: payload.device})\n  }\n}\n\nexport default DeviceActions\n\n/*\nfunction anyNamedDevice () {\n  // This is the closest we can get for now to get all devices.\n  // https://github.com/WebBluetoothCG/web-bluetooth/issues/234\n  return Array.from('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    .map(c => ({namePrefix: c}))\n    .concat({name: ''})\n}\n*/\n\n/*\ndiscoverServicesForDevice ({ dispatch, commit }, bluetoothGatt) {\n  return bluetoothGatt.getPrimaryServices()\n  .then(services => {\n    return Promise.mapSeries(services, function (service, index, length) {\n      return dispatch('discoverCharacteristicsForService', service)\n      .then(_ => {\n        commit(mutationTypes.BLE_SERVICE_ADDED, {service: service})\n      })\n    })\n  })\n  .catch(err => console.error(err))\n},\ndiscoverCharacteristicsForService ({ dispatch, commit }, bluetoothService) {\n  return bluetoothService.getCharacteristics()\n  .then(characteristics => {\n    return Promise.mapSeries(characteristics, function (characteristic, index, length) {\n      return dispatch('configureCharacteristic', characteristic)\n      .then(_ => {\n        commit(mutationTypes.BLE_CHARACTERISTIC_ADDED, {characteristic: characteristic})\n      })\n    })\n    .then(_ => { console.log('characteristics configured') })\n  })\n  .catch(err => console.error(err))\n},\nconfigureCharacteristic ({ dispatch, commit }, bluetoothCharacteristic) {\n  return DiscoveryPromises.promiseForConfigurationOfCharacteristic(bluetoothCharacteristic)\n  .catch(err => console.error(err))\n},\n*/\n/*\nfunction filterByUUID (objectsWithUUID) {\n  var foundServices = []\n  return objectsWithUUID.filter(item => {\n    if (foundServices.includes(item.uuid)) {\n      return false\n    } else {\n      foundServices.push(item.uuid)\n      return true\n    }\n  })\n}\n\n// const BatteryCharacteristicUUID = '00002a1b-0000-1000-8000-00805f9b34fb'\n// const BatteryServiceUUID = '0000180f-0000-1000-8000-00805f9b34fb'\nconst ColourPickerServiceUUID = '47CA46C0-848E-11E6-BDF4-0800200C9A66'.toLowerCase()\nconst ColourPickerCharacteristicUUID = 'AA9AB6CA-AF3F-45B2-8932-A5043412A2FA'.toLowerCase()\n\nclass CharacteristicListener {\n  constructor () {\n    this.characteristics = []\n  }\n\n  addCharacteristic (characteristic) {\n    if (!this.characteristics.includes(characteristic)) {\n      this.characteristics.push(characteristic)\n      console.log(characteristic.addEventListener('characteristicvaluechanged', this.onCharacteristicEvent))\n    }\n    console.log(this.characteristics)\n  }\n\n  onCharacteristicEvent (ev) {\n    const dataView = ev.target.value\n    let data = []\n    for (let i = 0; i < dataView.byteLength; i++) {\n      data.push(dataView.getUint8(i))\n    }\n    console.log('CharacteristicListener onCharacteristicEvent')\n    console.log('CharacteristicListener Characteristic: ' + ev.target.uuid + ' ' + data)\n    console.log('CharacteristicListener characteristicvaluechanged: ' + ev.target.characteristicValueChanged)\n  }\n\n}\n\nconst characteristicListener = new CharacteristicListener()\n\n*/\n"]}