{"version":3,"sources":["../../src/actions/device.js"],"names":["mutationTypes","DeviceActions","webBluetoothAddDevice","query","dispatch","commit","requestParameters","name","namePrefix","filters","push","optionalServices","services","undefined","map","service","uuid","navigator","bluetooth","requestDevice","device","BLE_DEVICE_ADDED","webBluetoothWatchAdvertisments","gatt","connected","GattAdvertismentCallback","event","advertisment","addEventListener","watchAdvertisements","BLE_DEVICE_UPDATED","webBluetoothRemoveDevice","removeEventListener","GattDisconnectionCallback","disconnect","BLE_DEVICE_REMOVED","webBluetoothConnectDevice","payload","connect","currentTarget","webBluetoothDisconnectDevice"],"mappings":"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","file":"device.js","sourcesContent":["import * as mutationTypes from '../mutation-types'\r\n\r\nconst DeviceActions = {\r\n\r\n  /*\r\n    action launches the bluetooth native dialog to find devices in the proxmity\r\n    the query can contain the following keys:\r\n      * name\r\n      * namePrefix\r\n      * services - Setting services without a name or namePrefix will not return any results\r\n      * optionalServices\r\n  */\r\n  async webBluetoothAddDevice ({ dispatch, commit }, query) {\r\n    var requestParameters = { }\r\n    // Was a device name set for the character\r\n    if(query.name || query.namePrefix) {\r\n      var filters = []\r\n      if (query.name) {\r\n        filters.push({name: query.name})\r\n      }\r\n      if (query.namePrefix) {\r\n        filters.push({namePrefix: query.namePrefix})\r\n      }\r\n      requestParameters.filters = filters\r\n      requestParameters.optionalServices = query.services\r\n    } else{\r\n      requestParameters['acceptAllDevices'] = true\r\n      requestParameters.optionalServices = query.services\r\n    }\r\n    // Does the query specify a collection of optional services to look for\r\n    if (query.optionalServices !== undefined) {\r\n      requestParameters['optionalServices'] = query.optionalServices.map(service => service.uuid)\r\n    }\r\n    // Perform Query\r\n    let device = await navigator.bluetooth.requestDevice(requestParameters)\r\n    if (device) {\r\n      commit(mutationTypes.BLE_DEVICE_ADDED, {device: device})\r\n    }\r\n  },\r\n\r\n  async webBluetoothWatchAdvertisments ({ dispatch, commit }, query) {\r\n    if (query.device.gatt.connected) {\r\n      //Add listener for RSSI\r\n      query.device.GattAdvertismentCallback = function (event) {\r\n        dispatch('webBluetoothDeviceAdvertisment', {advertisment: event})\r\n      }\r\n      query.device.addEventListener('advertisementreceived', query.device.GattAdvertismentCallback)\r\n      await query.device.watchAdvertisements()\r\n      commit(mutationTypes.BLE_DEVICE_UPDATED, {device: query.device})\r\n    }\r\n  },\r\n\r\n  async webBluetoothRemoveDevice ({dispatch, commit}, query) {\r\n    if (query.device.gatt.connected) {\r\n      query.device.removeEventListener('gattserverdisconnected', query.device.GattDisconnectionCallback)\r\n      query.device.removeEventListener('advertisementreceived', query.device.GattAdvertismentCallback)\r\n      await query.device.gatt.disconnect()\r\n    }\r\n    commit(mutationTypes.BLE_DEVICE_REMOVED, {device: query.device})\r\n  },\r\n\r\n  async webBluetoothConnectDevice ({ dispatch, commit }, payload) {\r\n    if (!payload.device.gatt.connected) {\r\n      await payload.device.gatt.connect()\r\n      payload.device.GattDisconnectionCallback = function(event) {\r\n        dispatch('webBluetoothDisconnectDevice', {device: event.currentTarget})\r\n      }\r\n      payload.device.addEventListener('gattserverdisconnected', payload.device.GattDisconnectionCallback)\r\n      commit(mutationTypes.BLE_DEVICE_UPDATED, {device: payload.device})\r\n    }\r\n  },\r\n\r\n  async webBluetoothDisconnectDevice ({ dispatch, commit }, payload) {\r\n    if (payload.device.gatt.connected) {\r\n      payload.device.removeEventListener('gattserverdisconnected', payload.device.GattDisconnectionCallback)\r\n      payload.device.removeEventListener('advertisementreceived', payload.device.GattAdvertismentCallback)\r\n      await payload.device.gatt.disconnect()\r\n      commit(mutationTypes.BLE_DEVICE_UPDATED, {device: payload.device})\r\n    }\r\n  }\r\n}\r\n\r\nexport default DeviceActions\r\n\r\n/*\r\nfunction anyNamedDevice () {\r\n  // This is the closest we can get for now to get all devices.\r\n  // https://github.com/WebBluetoothCG/web-bluetooth/issues/234\r\n  return Array.from('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\r\n    .map(c => ({namePrefix: c}))\r\n    .concat({name: ''})\r\n}\r\n*/\r\n\r\n/*\r\ndiscoverServicesForDevice ({ dispatch, commit }, bluetoothGatt) {\r\n  return bluetoothGatt.getPrimaryServices()\r\n  .then(services => {\r\n    return Promise.mapSeries(services, function (service, index, length) {\r\n      return dispatch('discoverCharacteristicsForService', service)\r\n      .then(_ => {\r\n        commit(mutationTypes.BLE_SERVICE_ADDED, {service: service})\r\n      })\r\n    })\r\n  })\r\n  .catch(err => console.error(err))\r\n},\r\ndiscoverCharacteristicsForService ({ dispatch, commit }, bluetoothService) {\r\n  return bluetoothService.getCharacteristics()\r\n  .then(characteristics => {\r\n    return Promise.mapSeries(characteristics, function (characteristic, index, length) {\r\n      return dispatch('configureCharacteristic', characteristic)\r\n      .then(_ => {\r\n        commit(mutationTypes.BLE_CHARACTERISTIC_ADDED, {characteristic: characteristic})\r\n      })\r\n    })\r\n    .then(_ => { console.log('characteristics configured') })\r\n  })\r\n  .catch(err => console.error(err))\r\n},\r\nconfigureCharacteristic ({ dispatch, commit }, bluetoothCharacteristic) {\r\n  return DiscoveryPromises.promiseForConfigurationOfCharacteristic(bluetoothCharacteristic)\r\n  .catch(err => console.error(err))\r\n},\r\n*/\r\n/*\r\nfunction filterByUUID (objectsWithUUID) {\r\n  var foundServices = []\r\n  return objectsWithUUID.filter(item => {\r\n    if (foundServices.includes(item.uuid)) {\r\n      return false\r\n    } else {\r\n      foundServices.push(item.uuid)\r\n      return true\r\n    }\r\n  })\r\n}\r\n\r\n// const BatteryCharacteristicUUID = '00002a1b-0000-1000-8000-00805f9b34fb'\r\n// const BatteryServiceUUID = '0000180f-0000-1000-8000-00805f9b34fb'\r\nconst ColourPickerServiceUUID = '47CA46C0-848E-11E6-BDF4-0800200C9A66'.toLowerCase()\r\nconst ColourPickerCharacteristicUUID = 'AA9AB6CA-AF3F-45B2-8932-A5043412A2FA'.toLowerCase()\r\n\r\nclass CharacteristicListener {\r\n  constructor () {\r\n    this.characteristics = []\r\n  }\r\n\r\n  addCharacteristic (characteristic) {\r\n    if (!this.characteristics.includes(characteristic)) {\r\n      this.characteristics.push(characteristic)\r\n      console.log(characteristic.addEventListener('characteristicvaluechanged', this.onCharacteristicEvent))\r\n    }\r\n    console.log(this.characteristics)\r\n  }\r\n\r\n  onCharacteristicEvent (ev) {\r\n    const dataView = ev.target.value\r\n    let data = []\r\n    for (let i = 0; i < dataView.byteLength; i++) {\r\n      data.push(dataView.getUint8(i))\r\n    }\r\n    console.log('CharacteristicListener onCharacteristicEvent')\r\n    console.log('CharacteristicListener Characteristic: ' + ev.target.uuid + ' ' + data)\r\n    console.log('CharacteristicListener characteristicvaluechanged: ' + ev.target.characteristicValueChanged)\r\n  }\r\n\r\n}\r\n\r\nconst characteristicListener = new CharacteristicListener()\r\n\r\n*/\r\n"]}