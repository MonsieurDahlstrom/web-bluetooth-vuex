{"version":3,"sources":["../../src/actions/service.js"],"names":["MutationTypes","ServiceActions","webBluetoothDiscoverServices","query","dispatch","commit","discoveredServices","services","undefined","device","gatt","getPrimaryServices","service","push","getPrimaryService","BLE_SERVICES_DISCOVERED"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;IAAYA,a;;;;;;AAEZ,IAAMC,iBAAiB;AACfC,8BADe;AAAA,kGACqCC,KADrC;AAAA,UACiBC,QADjB,QACiBA,QADjB;AAAA,UAC2BC,MAD3B,QAC2BA,MAD3B;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEfC,gCAFe,GAEM,EAFN;;AAAA,oBAGfH,MAAMI,QAAN,KAAmBC,SAHJ;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAIIL,MAAMM,MAAN,CAAaC,IAAb,CAAkBC,kBAAlB,EAJJ;;AAAA;AAIbJ,sBAJa;AAAA;AAAA;AAAA;AAAA;;AAKjB,0DAAoBA,QAApB,qGAA8B;AAArBK,uBAAqB;;AAC5BR,yBAAS,qCAAT,EAA+C,EAACQ,SAASA,OAAV,EAA/C;AACAN,mCAAmBO,IAAnB,CAAwBD,OAAxB;AACD;AARgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAUGT,MAAMI,QAVT;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAURK,sBAVQ;AAAA;AAAA,qBAWKT,MAAMM,MAAN,CAAaC,IAAb,CAAkBI,iBAAlB,CAAoCF,SAApC,CAXL;;AAAA;AAWXA,uBAXW;;AAYfR,uBAAS,qCAAT,EAA+C,EAACQ,SAASA,SAAV,EAA/C;AACAN,iCAAmBO,IAAnB,CAAwBD,SAAxB;;AAbe;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAgBnBP,qBAAOL,cAAce,uBAArB,EAA8C,EAACR,UAAUD,kBAAX,EAA9C;;AAhBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAvB;;kBAoBeL,c","file":"service.js","sourcesContent":["import * as MutationTypes from '../mutation-types'\r\n\r\nconst ServiceActions = {\r\n  async webBluetoothDiscoverServices ({ dispatch, commit }, query) {\r\n    let discoveredServices = []\r\n    if (query.services === undefined) {\r\n      var services = await query.device.gatt.getPrimaryServices()\r\n      for (var service of services) {\r\n        dispatch('webBluetoothDiscoverCharacteristics',{service: service})\r\n        discoveredServices.push(service)\r\n      }\r\n    } else {\r\n      for (let service of query.services) {\r\n        let service = await query.device.gatt.getPrimaryService(service)\r\n        dispatch('webBluetoothDiscoverCharacteristics',{service: service})\r\n        discoveredServices.push(service)\r\n      }\r\n    }\r\n    commit(MutationTypes.BLE_SERVICES_DISCOVERED, {services: discoveredServices})\r\n  }\r\n}\r\n\r\nexport default ServiceActions\r\n"]}